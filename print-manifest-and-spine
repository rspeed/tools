#!/usr/bin/env python3

import argparse
import os
import sys
import regex

def natural_sort(list_to_sort):
	convert = lambda text: int(text) if text.isdigit() else text.lower()
	alphanum_key = lambda key: [convert(c) for c in regex.split('([0-9]+)', key)]
	return sorted(list_to_sort, key=alphanum_key)

def main():
	parser = argparse.ArgumentParser(description="Print <manifest> and <spine> tags to standard output for the given Standard Ebooks source directory, for use in that directory's content.opf.")
	parser.add_argument("directory", metavar="DIRECTORY", help="a Standard Ebooks source directory")
	args = parser.parse_args()

	directory = os.path.abspath(args.directory)

	if not os.path.isdir(directory):
		print("Error: Not a directory: {}".format(directory), file=sys.stderr)
		exit(1)

	#Build the manifest
	manifest = []

	#Add CSS
	for _, _, filenames in os.walk(os.path.join(directory, "src", "epub", "css")):
		for filename in filenames:
			manifest.append("<item href=\"css/{}\" id=\"{}\" media-type=\"text/css\"/>".format(filename, filename))

	#Add images
	for _, _, filenames in os.walk(os.path.join(directory, "src", "epub", "images")):
		for filename in filenames:
			media_type = "image/jpeg"
			properties = ""

			if filename.endswith(".svg"):
				media_type = "image/svg+xml"

			if filename.endswith(".png"):
				media_type = "image/png"

			if filename == "cover.svg":
				properties = " properties=\"cover-image\""

			manifest.append("<item href=\"images/{}\" id=\"{}\" media-type=\"{}\"{}/>".format(filename, filename, media_type, properties))

	#Add XHTML files
	for _, _, filenames in os.walk(os.path.join(directory, "src", "epub", "text")):
		for filename in filenames:
			properties = ""

			if filename == "titlepage.xhtml" or filename == "colophon.xhtml":
				properties = " properties=\"svg\""

			manifest.append("<item href=\"text/{}\" id=\"{}\" media-type=\"application/xhtml+xml\"{}/>".format(filename, filename, properties))

	manifest = natural_sort(manifest)

	manifest_xhtml = "\t<manifest>\n\t\t<item href=\"toc.xhtml\" id=\"toc.xhtml\" media-type=\"application/xhtml+xml\" properties=\"nav\"/>\n"

	for line in manifest:
		manifest_xhtml = manifest_xhtml + "\t\t" + line + "\n"

	manifest_xhtml = manifest_xhtml + "\t</manifest>"


	#Build the spine
	excluded_files = ["dedication.xhtml", "introduction.xhtml", "foreword.xhtml", "preface.xhtml", "epigraph.xhtml", "halftitle.xhtml", "titlepage.xhtml", "colophon.xhtml", "uncopyright.xhtml", "imprint.xhtml", "loi.xhtml", "endnotes.xhtml"]
	spine = ["<itemref idref=\"titlepage.xhtml\"/>", "<itemref idref=\"imprint.xhtml\"/>"]

	filenames = natural_sort(os.listdir(os.path.join(directory, "src", "epub", "text")))

	if "dedication.xhtml" in filenames:
		spine.append("<itemref idref=\"dedication.xhtml\"/>")

	if "introduction.xhtml" in filenames:
		spine.append("<itemref idref=\"introduction.xhtml\"/>")

	if "foreword.xhtml" in filenames:
		spine.append("<itemref idref=\"foreword.xhtml\"/>")

	if "preface.xhtml" in filenames:
		spine.append("<itemref idref=\"preface.xhtml\"/>")

	if "epigraph.xhtml" in filenames:
		spine.append("<itemref idref=\"epigraph.xhtml\"/>")

	if "halftitle.xhtml" in filenames:
		spine.append("<itemref idref=\"halftitle.xhtml\"/>")

	for filename in filenames:
		if filename not in excluded_files:
			spine.append("<itemref idref=\"{}\"/>".format(filename))

	if "endnotes.xhtml" in filenames:
		spine.append("<itemref idref=\"endnotes.xhtml\"/>")

	if "loi.xhtml" in filenames:
		spine.append("<itemref idref=\"loi.xhtml\"/>")

	spine.append("<itemref idref=\"colophon.xhtml\"/>")
	spine.append("<itemref idref=\"uncopyright.xhtml\"/>")

	spine_xhtml = "\t<spine>\n"
	for line in spine:
		spine_xhtml = spine_xhtml + "\t\t" + line + "\n"

	spine_xhtml = spine_xhtml + "\t</spine>"

	print(manifest_xhtml)
	print(spine_xhtml)

if __name__ == "__main__":
	main()
